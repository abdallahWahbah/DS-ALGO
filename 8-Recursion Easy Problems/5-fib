const fib = number =>
{
    let fib = [1, 1]

    for(let i = 2; i < number; i++)
    {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    return fib
}

console.log(fib(4)) // [1, 1, 2, 3]
console.log(fib(10)) // [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
console.log(fib(28)) // [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811]



// return the last item in fib
// Recall that the Fibonacci sequence is the sequence of whole numbers 1, 1, 2, 3, 5, 8, ... 
// which starts with 1 and 1, and where every number thereafter is equal to the sum of the previous two numbers.

const lastItemOfFib = number =>
{
    // first solution
    // return fib(number)[number - 1]

    // second solution
    // if(number < 2) return number; // return 1
    // return lastItemOfFib(number - 1) + lastItemOfFib(number - 2);

    // third solution
    let firstItem = 1;
    let secontItem = 1;
    let sum = firstItem + secontItem;
    for(let i = 2; i < number; i++)
    {
        sum = firstItem + secontItem;
        firstItem = secontItem;
        secontItem = sum;
    }
    return sum;
}

console.log(lastItemOfFib(4))
console.log(lastItemOfFib(10))
console.log(lastItemOfFib(28))