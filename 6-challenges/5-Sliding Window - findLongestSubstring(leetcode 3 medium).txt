question course link: https://www.udemy.com/course/js-algorithms-and-data-structures-masterclass/learn/quiz/4410594#overview
solution video: https://www.youtube.com/watch?v=wiGpQwVHdE0

Write a function called findLongestSubstring, which accepts a string and returns the length of the longest substring with all distinct characters.

findLongestSubstring('') // 0
findLongestSubstring('rithmschool') // 7
findLongestSubstring('thisisawesome') // 6
findLongestSubstring('thecatinthehat') // 7
findLongestSubstring('bbbbbb') // 1
findLongestSubstring('longestsubstring') // 8
findLongestSubstring('thisishowwedoit') // 6
Time Complexity - O(n)



const findLongestSubstring = (str) =>
{
    if(str.length === 0) return 0;

    const mySet = new Set();
    let left = 0;
    let length = 0;

    for(let right = 0; right < str.length; right++)
    {
        while(mySet.has(str[right]))
        {
            mySet.delete(str[left]);
            left++;
        }
        mySet.add(str[right]);
        length = Math.max(length, right - left + 1);
    }
    return length
}


console.log(findLongestSubstring('')) // 0
console.log(findLongestSubstring('rithmschool')) // 7
console.log(findLongestSubstring('thisisawesome')) // 6
console.log(findLongestSubstring('thecatinthehat')) // 7
console.log(findLongestSubstring('bbbbbb')) // 1
console.log(findLongestSubstring('longestsubstring')) // 8
console.log(findLongestSubstring('thisishowwedoit')) // 6