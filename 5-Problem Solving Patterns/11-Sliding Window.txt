// get max addition of n consecutive numbers in an array


const naiveMaxSubArraySum = (arr, num) =>
{
    if(num > arr.length) return;
    let max = -Infinity;
    for(let i = 0; i < arr.length - num +1; i++)
    {
        let temp = 0;
        for(let j = 0; j < num; j++)
        {
            temp+= arr[i + j];
        }
        if(temp > max) max=temp;
    }
    console.log(max)
    //return max;
}

naiveMaxSubArraySum([1,2,5,2,8,1,5],2) // 10
naiveMaxSubArraySum([1,2,5,2,8,1,5],4) // 17
naiveMaxSubArraySum([4,2,1,6,2],4) // 13


const maxSubArraySum = (arr, num) =>
{
    if(num > arr.length) return false;
    if(num === arr.length) return arr.reduce((acc, cur) => acc+cur)

    let maxSum=0;
    let tempSum=0;
    for(let i = 0; i < num; i++)
    {
        maxSum += arr[i];
    }
    tempSum = maxSum;
    for(let i = num; i < arr.length; i++)
    {
        tempSum = tempSum + arr[i] - arr[i - num];
        maxSum = Math.max(maxSum, tempSum);
    }
    return maxSum;
}

console.log(maxSubArraySum([2,6,9,2,1,8,5,6,3],3)) // 19
console.log(maxSubArraySum([1,2,5,2,8,1,5],2)) // 10
console.log(maxSubArraySum([1,2,5,2,8,1,5],4)) // 17
console.log(maxSubArraySum([4,2,1,6,2],4)) // 13


// the same solution with simple naming valriables
const maxSubArraySum = (arr, num) =>
{
    if(num > arr.length) return false;
    if(arr.length === 0) return 0;
    if(arr.length === num) return arr.reduce((acc, cur) => acc + cur);

    let sum = 0;
    for(let i = 0; i < num; i++)
    {
        sum += arr[i];
    }
    let max = sum;

    for(let i = num; i < arr.length; i++)
    {
        sum = sum + arr[i] - arr[i - num];
        if(sum > max) max = sum;
    }
    return max;
}