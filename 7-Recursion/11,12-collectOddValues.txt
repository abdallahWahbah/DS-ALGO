// He solved it in a near way (not completely different) (his solution is better)

const collectOddValues = (arr) =>
{
    let result = [];
    let index = 0;
    const helperMethod = (helperArr, index) =>
    {
        if(index === helperArr.length - 1) return;
        if(helperArr[index] % 2 !== 0) result.push(helperArr[index]);
        index++;
        helperMethod(arr, index);
    }

    helperMethod(arr, index);
    return result;
}

console.log(collectOddValues([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) // [1, 3, 5, 7, 9]

// His solution

const collectOddValues = (arr) =>
{
    let result = [];
    const helperMethod = (helperArr) =>
    {
        if(helperArr.length === 0) return;
        if(helperArr[0] % 2 !== 0) result.push(helperArr[0]);
        helperMethod(helperArr.slice(1));
    }

    helperMethod(arr);
    return result;
}

console.log(collectOddValues([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))


const collectOddValuesPureRecursive = arr =>
{
    let newArr = [];

    if(arr.length === 0) return newArr;
    if(arr[0] % 2 === 1) newArr.push(arr[0])

    newArr = newArr.concat(collectOddValuesPureRecursive(arr.slice(1)))
    return newArr
}

console.log(collectOddValuesPureRecursive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) // [1, 3, 5, 7, 9]